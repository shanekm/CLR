1. CLR Basics

	CLR - common language runtime (memory management, garbage collection, type safety etc)
		- many compilers (C#, F#, C++, VB) => compile code to Managed Module

	Managed Module - Compiler => compiles PE32 (32bit)/ PE(32+) file - used by CLR to execute\
		C# (source code) => C# compiler => managed module (PE32/+)
		a. Header
		b. CLR Header
		c. IL code
		d. metadata

	Assembly - CLR works with assemblies. Logical grouping of one or more managed modules
		- comipler groups/combines many managed modules into assembly
		- reusable component
		
2. Executing Assembly Code
	Main(){
		Console.WriteLine("1") => CLR looks and loads assembly (mscorelib.dll) into memory, JITed to CPU instructuions
		Console.WriteLine("2") => this assmebly (structure) has been loaded, it JITed again into CPU instructions
			// CLR recognizes any references and loads them into memory (other assemblies when needed)
	} 

3. Framework Class Library (FCL)
	- prewritten by Microsoft, used for WPF, MVC etc

	System - all basic types used by app
	System.Data - db 
	System.IO - files
	System.Net - low-level network communication
	System.Text - ASCII and Unicode types
	System.Threading - async and synch access operations
	System.XML - types used for processing XML 

4. CTS
	- specifications about types, properties, methods etc
	- specification of how types are created, defined and used
	- access members (public, internal, private etc)

5. Stronbly Named Assemblies vs. Shared/Private assemblies
	a. Strongly named - public/private key, culture, version
		- can be deployed to GAC
	b. Deployed to /bin usually


6. Type Fundementals
	
	A. System.Object - basic .Net type
		- all types derive from System.Object

		Public Methods:
			a. Equals()
			b. GetHashCode()
			c. ToString()
			d. GetType() - return instance of type

		Private Methods:
			a. MemberwiseClone - copy properties of object
			b. Finalize() - called when GC determines that object is out of scope

		new - ex: new Employee() =>
			- calculate bytes needed for object creation
			- allocate memory on Managed Heap
			- set that memory to 0's
			- constructore called
			- return reference to this created object

	B. Casting Between Types
		- CLR allows you to cast object to it's type or any of its base types
		- type safe - checks when casting between types 

		Employee e = new Employee(); // OK
		Object o = new Employee();	// OK implicit casting from derived to base
		Manager : Employee => managers base type is employee

		// some method
		public void Promote(Object o)
		{
			// CLR confirms if Object o is in fact 'o' is Employee or Employee's drived type
			// If DateTime is passed to 'o' CLR will throw InvalidCastException
			Employee e = (Employee)o;
		}

		
		a. is Operator - worse than 'as', CLR checks twice
			if (o is Employee) {				// first check
				Employee e = (Employee)o;		// second check 
			}

		b. as Operator - better, checked only once
			Employee e = o as Employee			// checked only once
			if (e != null) { ... }


	C. Namespaces
		- allow logical grouping of related types

	D. CLR Run Time
		ex 1:
			a. M1 starts to execute
			b. memory is allocated for objects in M1, local string 'name' is pushed onto thread stack
			c. M1 calls M2, address in 'name' local variable is pushed onto stack
			d. inside M2 method, stack location will be indentified using param 's'
			e. return address is pushed onto stack - when called method should return when it finishes
			f. M2 starts to execute
			g. memory allocated for lenght, tally
			h. M2 starts to execute code inside it
			i. M2 gets return address from stack (return statement)
			j. M1 continues to execute

			public void M1 {
				string name = "Joe";
				M2(name);
				return;
			}

			public void M2 {
				Int32 lenght = s.Lenght;
				Int32 tally;
				...
				return;
			}

		ex 2:
			a. window process loads CLR into it
			b. CLR creates 1MB Thread Stack (stack, initialized)
			c. Managed heap is initialized
			e. CLR looks inside the method and loads all assemblies with their types etc
			f. CLR extracts info about those types from metadata and creates some data structures to represent those types 
				- notices all types that are used inside M3 (Employee, Int32, Manager, String ("Joe"))
				- on managed heap (initialized to 0's)
			g. Memory from stack is allocated for local variables "Employee", "year" and set to null, 0
			h. 'new' Manager object is created on Managed Heap and it's address is stored on Stack into variable 'e'
			i. 'e' no longer points to first Manager. Candidate for GC collection
			j. JIT compiler converts M3's IL code into native CPU
			k. JIT compiler executes creating pointers, addresses

			public void M3(){
				Employee e;
				Int32 year,
				e = new Manager();
				e = Employee.Lookup("Joe");
				year = e.GetYearEmployed();
				e.GetProgressReport();
			}
